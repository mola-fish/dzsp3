!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):t.WindGL=i()}(this,(function(){"use strict";function t(t,i,e){var r=t.createShader(i);if(t.shaderSource(r,e),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(t.getShaderInfoLog(r));return r}function i(i,e,r){var a=i.createProgram(),n=t(i,i.VERTEX_SHADER,e),o=t(i,i.FRAGMENT_SHADER,r);if(i.attachShader(a,n),i.attachShader(a,o),i.linkProgram(a),!i.getProgramParameter(a,i.LINK_STATUS))throw new Error(i.getProgramInfoLog(a));for(var s={program:a},d=i.getProgramParameter(a,i.ACTIVE_ATTRIBUTES),u=0;u<d;u++){var _=i.getActiveAttrib(a,u);s[_.name]=i.getAttribLocation(a,_.name)}for(var c=i.getProgramParameter(a,i.ACTIVE_UNIFORMS),l=0;l<c;l++){var f=i.getActiveUniform(a,l);s[f.name]=i.getUniformLocation(a,f.name)}return s}function e(t,i,e,r,a){var n=t.createTexture();return t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,i),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,i),e instanceof Uint8Array?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r,a,0,t.RGBA,t.UNSIGNED_BYTE,e):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),t.bindTexture(t.TEXTURE_2D,null),n}function r(t,i,e){t.activeTexture(t.TEXTURE0+e),t.bindTexture(t.TEXTURE_2D,i)}function a(t,i){var e=t.createBuffer();return t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,i,t.STATIC_DRAW),e}function n(t,i,e,r){t.bindBuffer(t.ARRAY_BUFFER,i),t.enableVertexAttribArray(e),t.vertexAttribPointer(e,r,t.FLOAT,!1,0,0)}function o(t,i,e){t.bindFramebuffer(t.FRAMEBUFFER,i),e&&t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}var s="precision mediump float;\n\nattribute vec2 a_pos;\n\nvarying vec2 v_tex_pos;\n\nvoid main() {\n    v_tex_pos = a_pos;\n    gl_Position = vec4(1.0 - 2.0 * a_pos, 0, 1);\n}\n",d="#ccc",u={0:d,.1:d,.2:d,.3:d,.4:d,.5:d,.6:d,1:d},_=function(t){this.gl=t,this.layer=null,this.numParticles=4225,this.pointSize=1.3,this.spdFilterMin=0,this.spdFilterMax=100,this.fadeOpacity=.983,this.speedFactor=.42,this.dropRate=.043,this.dropRateBump=.01,this.dirFilterStart=0,this.dirFilterEnd=360,this.drawProgram=i(t,"precision mediump float;\n\nattribute float a_index;\n\nuniform sampler2D u_particles;\nuniform float u_particles_res;\nuniform float u_point_size;\n\nvarying vec2 v_particle_pos;\n\nvoid main() {\n    vec4 color = texture2D(u_particles, vec2(\n        fract(a_index / u_particles_res),\n        floor(a_index / u_particles_res) / u_particles_res));\n\n    // decode current particle position from the pixel's RGBA value\n    v_particle_pos = vec2(\n        color.r / 255.0 + color.b,\n        color.g / 255.0 + color.a);\n\n    gl_PointSize = u_point_size;\n    gl_Position = vec4(2.0 * v_particle_pos.x - 1.0, 1.0 - 2.0 * v_particle_pos.y, 0, 1);\n}\n","precision mediump float;\n\nuniform sampler2D u_wind;\nuniform float u_spd_filter_min;\nuniform float u_spd_filter_max;\nuniform float u_dir_filter_min;\nuniform float u_dir_filter_max;\nuniform vec2 u_wind_min;\nuniform vec2 u_wind_max;\nuniform sampler2D u_color_ramp;\n\nvarying vec2 v_particle_pos;\n\nfloat angle_convert(float dir) {\n    if (dir < 0.0) { dir = dir + 360.0; }\n    return dir;\n}\n\nvoid main() {\n    vec2 velocity = mix(u_wind_min, u_wind_max, texture2D(u_wind, v_particle_pos).rg);\n    float direction = degrees( atan(velocity.x, velocity.y) );\n    float direction_t = angle_convert(direction);\n    float speed_t = length(velocity) / length(u_wind_max);\n\n    // color ramp is encoded in a 16x16 texture\n    vec2 ramp_pos = vec2(\n        fract(16.0 * speed_t),\n        floor(16.0 * speed_t) / 16.0);\n\n    if( length(velocity) < u_spd_filter_min || length(velocity) > u_spd_filter_max ){ gl_FragColor = vec4((texture2D(u_color_ramp, ramp_pos)).rgb,0.0); }\n    else if( u_dir_filter_min < u_dir_filter_max && (direction_t < u_dir_filter_min || direction_t > u_dir_filter_max) ){ gl_FragColor = vec4((texture2D(u_color_ramp, ramp_pos)).rgb,0.0); }\n    else if( u_dir_filter_min >= u_dir_filter_max && ( direction_t > u_dir_filter_max && direction_t < u_dir_filter_min ) ){ gl_FragColor = vec4((texture2D(u_color_ramp, ramp_pos)).rgb,0.0); }\n    else {gl_FragColor = texture2D(u_color_ramp, ramp_pos);}\n}\n"),this.screenProgram=i(t,s,"precision mediump float;\n\nuniform sampler2D u_screen;\nuniform float u_opacity;\n\nvarying vec2 v_tex_pos;\n\nvoid main() {\n    vec4 color = texture2D(u_screen, 1.0 - v_tex_pos);\n    // a hack to guarantee opacity fade out even with a value close to 1.0\n    gl_FragColor = vec4(floor(255.0 * color * u_opacity) / 255.0);\n}\n"),this.updateProgram=i(t,s,"precision highp float;\n\nuniform sampler2D u_particles;\nuniform sampler2D u_wind;\nuniform vec2 u_wind_res;\nuniform vec2 u_wind_min;\nuniform vec2 u_wind_max;\nuniform float u_rand_seed;\nuniform float u_speed_factor;\nuniform float u_speed_base;\nuniform float u_drop_rate;\nuniform float u_drop_rate_bump;\n\nvarying vec2 v_tex_pos;\n\n// pseudo-random generator\nconst vec3 rand_constants = vec3(12.9898, 78.233, 4375.85453);\nfloat rand(const vec2 co) {\n    float t = dot(rand_constants.xy, co);\n    return fract(sin(t) * (rand_constants.z + t));\n}\n\n// wind speed lookup; use manual bilinear filtering based on 4 adjacent pixels for smooth interpolation\nvec2 lookup_wind(const vec2 uv) {\n    return texture2D(u_wind, uv).rg; // lower-res hardware filtering\n    //vec2 px = 1.0 / u_wind_res;\n    //vec2 vc = (floor(uv * u_wind_res)) * px;\n    //vec2 f = fract(uv * u_wind_res);\n    //vec2 tl = texture2D(u_wind, vc).rg;\n    //vec2 tr = texture2D(u_wind, vc + vec2(px.x, 0)).rg;\n    //vec2 bl = texture2D(u_wind, vc + vec2(0, px.y)).rg;\n    //vec2 br = texture2D(u_wind, vc + px).rg;\n    //return mix(mix(tl, tr, f.x), mix(bl, br, f.x), f.y);\n}\n\nvoid main() {\n    vec4 color = texture2D(u_particles, v_tex_pos);\n    vec2 pos = vec2(\n        color.r / 255.0 + color.b,\n        color.g / 255.0 + color.a); // decode particle position from pixel RGBA\n\n    vec2 velocity = mix(u_wind_min, u_wind_max, lookup_wind(pos));\n    float speed_t = length(velocity) / length(u_wind_max);\n\n    // take EPSG:4236 distortion into account for calculating where the particle moved\n    float distortion = cos(radians(pos.y * 180.0 - 90.0));\n    vec2 offset = vec2(velocity.x, -velocity.y) * 0.0001 * u_speed_factor;\n\n    // update particle position, wrapping around the date line\n    pos = fract(1.0 + pos + offset);\n\n    // a random seed to use for the particle drop\n    vec2 seed = (pos + v_tex_pos) * u_rand_seed;\n\n    // drop rate is a chance a particle will restart at random position, to avoid degeneration\n    float drop_rate = u_drop_rate + speed_t * u_drop_rate_bump;\n    float drop = step(1.0 - drop_rate, rand(seed));\n\n    vec2 random_pos = vec2(\n        rand(seed + 1.3),\n        rand(seed + 2.1));\n    pos = mix(pos, random_pos, drop);\n\n    // encode the new particle position back into RGBA\n    gl_FragColor = vec4(\n        fract(pos * 255.0),\n        floor(pos * 255.0) / 255.0);\n}\n"),this.quadBuffer=a(t,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1])),this.framebuffer=t.createFramebuffer(),this.setColorRamp(u),this.resize()},c={numParticles:{}};return _.prototype.resize=function(){var t=this.gl,i=new Uint8Array(t.canvas.width*t.canvas.height*4);this.backgroundTexture=e(t,t.NEAREST,i,t.canvas.width,t.canvas.height),this.screenTexture=e(t,t.NEAREST,i,t.canvas.width,t.canvas.height)},_.prototype.setColorRamp=function(t){this.colorRampTexture=e(this.gl,this.gl.LINEAR,function(t){var i=document.createElement("canvas"),e=i.getContext("2d");i.width=256,i.height=1;var r=e.createLinearGradient(0,0,256,0);for(var a in t)r.addColorStop(+a,t[a]);return e.fillStyle=r,e.fillRect(0,0,256,1),new Uint8Array(e.getImageData(0,0,256,1).data)}(t),16,16)},c.numParticles.set=function(t){var i=this.gl,r=this.particleStateResolution=Math.ceil(Math.sqrt(t));this._numParticles=r*r;for(var n=new Uint8Array(4*this._numParticles),o=0;o<n.length;o++)n[o]=Math.floor(256*Math.random());this.particleStateTexture0=e(i,i.NEAREST,n,r,r),this.particleStateTexture1=e(i,i.NEAREST,n,r,r);for(var s=new Float32Array(this._numParticles),d=0;d<this._numParticles;d++)s[d]=d;this.particleIndexBuffer=a(i,s)},c.numParticles.get=function(){return this._numParticles},_.prototype.setWind=function(t,i){this.windData=t,this.resetWind(i)},_.prototype.resetWind=function(t){if(this.windData){this.windData1=new Object;var i=Math.round(this.windData.width*(t[2]-t[0])/(this.windData.lonMax-this.windData.lonMin)),r=Math.round(this.windData.height*(t[3]-t[1])/(this.windData.latMax-this.windData.latMin)),a=Math.round(this.windData.width*(t[0]-this.windData.lonMin)/(this.windData.lonMax-this.windData.lonMin)),n=Math.round(this.windData.height*(t[1]-this.windData.latMin)/(this.windData.latMax-this.windData.latMin));this.windData1.lonMax=t[2],this.windData1.lonMin=t[0],this.windData1.latMax=t[3],this.windData1.latMin=t[1],this.windData1.uMax=this.windData.uMax,this.windData1.uMin=this.windData.uMin,this.windData1.vMax=this.windData.vMax,this.windData1.vMin=this.windData.vMin,this.windData1.width=i,this.windData1.height=r,this.windData1.data=new Uint8Array(i*r*4);for(var o=0;o<r;o++)for(var s=0;s<i;s++)this.windData1.data[(r-o)*i*4+4*s]=this.windData.data[(n+o)*this.windData.width*4+4*(a+s)],this.windData1.data[(r-o)*i*4+4*s+1]=this.windData.data[(n+o)*this.windData.width*4+4*(a+s)+1],this.windData1.data[(r-o)*i*4+4*s+2]=this.windData.data[(n+o)*this.windData.width*4+4*(a+s)+2],this.windData1.data[(r-o)*i*4+4*s+3]=this.windData.data[(n+o)*this.windData.width*4+4*(a+s)+3];this.windTexture=e(this.gl,this.gl.LINEAR,this.windData1.data,this.windData1.width,this.windData1.height)}},_.prototype.draw=function(){var t=this.gl;t.disable(t.DEPTH_TEST),t.disable(t.STENCIL_TEST),r(t,this.windTexture,0),r(t,this.particleStateTexture0,1),this.drawScreen(),this.updateParticles(),this.layer.changed()},_.prototype.drawScreen=function(){var t=this.gl;o(t,this.framebuffer,this.screenTexture),t.viewport(0,0,t.canvas.width,t.canvas.height),this.drawTexture(this.backgroundTexture,this.fadeOpacity),this.drawParticles(),o(t,null),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),this.drawTexture(this.screenTexture,1),t.disable(t.BLEND);var i=this.backgroundTexture;this.backgroundTexture=this.screenTexture,this.screenTexture=i},_.prototype.drawTexture=function(t,i){var e=this.gl,a=this.screenProgram;e.useProgram(a.program),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),n(e,this.quadBuffer,a.a_pos,2),r(e,t,2),e.uniform1i(a.u_screen,2),e.uniform1f(a.u_opacity,i),e.drawArrays(e.TRIANGLES,0,6)},_.prototype.drawParticles=function(){var t=this.gl,i=this.drawProgram;t.useProgram(i.program),n(t,this.particleIndexBuffer,i.a_index,1),r(t,this.colorRampTexture,2),t.uniform1i(i.u_wind,0),t.uniform1i(i.u_particles,1),t.uniform1i(i.u_color_ramp,2),t.uniform1f(i.u_spd_filter_min,this.spdFilterMin),t.uniform1f(i.u_spd_filter_max,this.spdFilterMax),t.uniform1f(i.u_dir_filter_min,this.dirFilterStart),t.uniform1f(i.u_dir_filter_max,this.dirFilterEnd),t.uniform1f(i.u_point_size,this.pointSize),t.uniform1f(i.u_particles_res,this.particleStateResolution),t.uniform2f(i.u_wind_min,this.windData.uMin,this.windData.vMin),t.uniform2f(i.u_wind_max,this.windData.uMax,this.windData.vMax),t.drawArrays(t.POINTS,0,this._numParticles)},_.prototype.updateParticles=function(){var t=this.gl;o(t,this.framebuffer,this.particleStateTexture1),t.viewport(0,0,this.particleStateResolution,this.particleStateResolution);var i=this.updateProgram;t.useProgram(i.program),n(t,this.quadBuffer,i.a_pos,2),t.uniform1i(i.u_wind,0),t.uniform1i(i.u_particles,1),t.uniform1f(i.u_rand_seed,Math.random()),t.uniform2f(i.u_wind_res,this.windData.width,this.windData.height),t.uniform2f(i.u_wind_min,this.windData.uMin,this.windData.vMin),t.uniform2f(i.u_wind_max,this.windData.uMax,this.windData.vMax),t.uniform1f(i.u_speed_factor,this.speedFactor),t.uniform1f(i.u_drop_rate,this.dropRate),t.uniform1f(i.u_drop_rate_bump,this.dropRateBump),t.drawArrays(t.TRIANGLES,0,6);var e=this.particleStateTexture0;this.particleStateTexture0=this.particleStateTexture1,this.particleStateTexture1=e},Object.defineProperties(_.prototype,c),_}));